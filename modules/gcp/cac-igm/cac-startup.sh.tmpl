# Copyright (c) 2019 Teradici Corporation
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

#!/bin/bash

INSTALL_DIR="/root"
INSTALL_LOG="$INSTALL_DIR/cac-install.log"
cd $INSTALL_DIR


# Network tuning
PCOIP_NETWORK_CONF_FILE="/etc/sysctl.d/01-pcoip-cac-network.conf"

if [ ! -f $PCOIP_NETWORK_CONF_FILE ]; then
    # Note the indented HEREDOC lines must be preceded by tabs, not spaces
    cat <<- EOF > $PCOIP_NETWORK_CONF_FILE
	# System Control network settings for CAC
	net.core.rmem_max=160000000
	net.core.rmem_default=160000000
	net.core.wmem_max=160000000
	net.core.wmem_default=160000000
	net.ipv4.udp_mem=120000 240000 600000
	net.core.netdev_max_backlog=2000
	EOF

    sysctl -p $PCOIP_NETWORK_CONF_FILE
fi


# download CAC installer
curl -L ${cac_installer_url} -o $INSTALL_DIR/cloud-access-connector.tar.gz
tar xzvf $INSTALL_DIR/cloud-access-connector.tar.gz


# Wait for service account to be added
# do this last because it takes a while for new AD user to be added in a
# new Domain Controller
# Note: using the domain controller IP instead of the domain name for the
#       host is more resilient
echo '### Installing ldap-utils ###'
RETRIES=5
while true; do
    apt-get -qq update
    apt-get -qq install ldap-utils
    RC=$?
    if [ $RC -eq 0 ] || [ $RETRIES -eq 0 ]; then
        break
    fi

    echo "Error installing ldap-utils. $RETRIES retries remaining..."
    RETRIES=$((RETRIES-1))
    sleep 5
done

echo '### Ensure AD account is available ###'
TIMEOUT=1200
until ldapwhoami \
    -H ldap://${domain_controller_ip} \
    -D ${service_account_username}@${domain_name} \
    -w ${service_account_password} \
    -o nettimeout=1; do
    if [ $TIMEOUT -le 0 ]; then
        break
    else
        echo "Waiting for AD account ${service_account_username}@${domain_name} to become available. Retrying in 10 seconds... (Timeout in $TIMEOUT seconds)"
    fi
    TIMEOUT=$((TIMEOUT-10))
    sleep 10
done


echo '### Installing Cloud Access Connector ###'
export CAM_BASE_URI=${cam_url}

if [ -z "${ssl_key}" ]; then
    $INSTALL_DIR/cloud-access-connector install \
        -t ${cac_token} \
        --accept-policies \
        --insecure \
        --sa-user ${service_account_username} \
        --sa-password "${service_account_password}" \
        --domain ${domain_name} \
        --domain-group "${domain_group}" \
        --reg-code ${pcoip_registration_code} \
        --sync-interval 5 \
        2>&1 | tee $INSTALL_LOG
else
    gsutil cp gs://${bucket_name}/${ssl_key} $INSTALL_DIR
    gsutil cp gs://${bucket_name}/${ssl_cert} $INSTALL_DIR

    $INSTALL_DIR/cloud-access-connector install \
        -t ${cac_token} \
        --accept-policies \
        --ssl-key $INSTALL_DIR/${ssl_key} \
        --ssl-cert $INSTALL_DIR/${ssl_cert} \
        --sa-user ${service_account_username} \
        --sa-password "${service_account_password}" \
        --domain ${domain_name} \
        --domain-group "${domain_group}" \
        --reg-code ${pcoip_registration_code} \
        --sync-interval 5 \
        2>&1 | tee $INSTALL_LOG
fi

docker service ls